buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6+', changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${ll_version}"
group = 'dev.xkmc.lpcore' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'lpcore'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=lpcore.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                lpcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=lpcore.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                lpcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg '-mixin.config=lpcore.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lpcore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                lpcore {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'lpcore.refmap.json'
    config 'lpcore.mixins.json'
}

repositories {
    maven { url 'https://jitpack.io' }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf("dev.xkmc.loadingprofiler:loadingprofiler:0.0.8")

    implementation fg.deobf("curse.maven:curios-309927:5680164")
    implementation fg.deobf("curse.maven:patchouli-306770:4966125")
    implementation fg.deobf("curse.maven:l2library-620203:5921890")
    implementation fg.deobf("curse.maven:l2-complements-758349:6040201")
    implementation fg.deobf("curse.maven:l2-artifacts-659547:5797320")
    implementation fg.deobf("curse.maven:l2-backpack-620229:5821683")
    implementation fg.deobf("curse.maven:l2weaponry-843723:5881571")
    implementation fg.deobf("curse.maven:modulargolems-690937:6058893")
    implementation fg.deobf("curse.maven:farmers-delight-398521:5962797")
    implementation fg.deobf("curse.maven:fruits-delight-943774:6012671")
    implementation fg.deobf("curse.maven:youkais-homecoming-957437:6071181")
    implementation fg.deobf("curse.maven:ars-nouveaus-flavors-delight-1131668:5927144")
    implementation fg.deobf("curse.maven:twilights-flavors-delight-871735:5802985")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:5894609")
    implementation fg.deobf("curse.maven:geckolib-388172:6027567")
    implementation fg.deobf("curse.maven:jei-238222:6075247")
    implementation fg.deobf("curse.maven:create-328085:5838779")
    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5468648")
    implementation fg.deobf("curse.maven:jade-324717:5876199")

    implementation fg.deobf("curse.maven:touhou-little-maid-355044:5896969")
    implementation fg.deobf("curse.maven:slashblade-241596:4937125")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "lpcore",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : 'lpcore.mixins.json',
                "FMLModType"              : "MOD"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
